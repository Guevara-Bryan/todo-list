(()=>{"use strict";var t,n=new Uint8Array(16);function e(){if(!t&&!(t="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return t(n)}const r=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,o=function(t){return"string"==typeof t&&r.test(t)};for(var i=[],u=0;u<256;++u)i.push((u+256).toString(16).substr(1));const s=function(t,n,r){var u=(t=t||{}).random||(t.rng||e)();if(u[6]=15&u[6]|64,u[8]=63&u[8]|128,n){r=r||0;for(var s=0;s<16;++s)n[r+s]=u[s];return n}return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,e=(i[t[n+0]]+i[t[n+1]]+i[t[n+2]]+i[t[n+3]]+"-"+i[t[n+4]]+i[t[n+5]]+"-"+i[t[n+6]]+i[t[n+7]]+"-"+i[t[n+8]]+i[t[n+9]]+"-"+i[t[n+10]]+i[t[n+11]]+i[t[n+12]]+i[t[n+13]]+i[t[n+14]]+i[t[n+15]]).toLowerCase();if(!o(e))throw TypeError("Stringified UUID is invalid");return e}(u)},f=function(t,n,e,r,o){let i=t,u=s(),f=n,a=e,c=r,d=o;const _={get_name:function(){return i},set_name:function(t){i=t},get_details:function(){return f},set_details:function(t){f=t},get_id:function(){return u},get_date:function(){return a},set_date:function(t){a=t},get_status:function(){return c},set_status:function(t){c=t},get_priority:function(){return d},set_priority:function(t){d=t},to_json:function(){return JSON.stringify(this,((t,n)=>void 0===["from_json","remove_self"].find((n=>n===t))&&"function"==typeof n?n():n))},from_json:function(t){const n=JSON.parse(t);return i=n.get_name,u=n.get_id,f=n.get_details,a=n.get_date,c=n.get_status,d=n.get_priority,_}};return _},a=function(t){let n=t,e=s(),r={};const o={set_name:function(t){n=t},get_name:function(){return n},get_id:function(){return e},get_tasks:function(){return Object.keys(r).map((t=>r[t]))},add_task:function(t){t.remove_self=function(){null!=r[t.get_id()]&&delete r[t.get_id()]},r[t.get_id()]=t},get_task:function(t){return r[t]},remove_task:function(t){null!=r[t]&&delete r[t]},to_json:function(){return JSON.stringify({name:n,id:e,tasks:JSON.stringify(r,((t,n)=>void 0!==n.to_json?n.to_json():n))})},from_json:function(t){const i=JSON.parse(t,((t,n)=>{if("tasks"===t){const t=JSON.parse(n);for(const n in t)t[n]=f().from_json(t[n]);return t}return n}));return n=i.name,e=i.id,r=i.tasks,o}};return o};a("Inbox"),a("Today")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
