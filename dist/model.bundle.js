(()=>{"use strict";var t,n=new Uint8Array(16);function e(){if(!t&&!(t="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return t(n)}const r=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,o=function(t){return"string"==typeof t&&r.test(t)};for(var u=[],i=0;i<256;++i)u.push((i+256).toString(16).substr(1));const a=function(t,n,r){var i=(t=t||{}).random||(t.rng||e)();if(i[6]=15&i[6]|64,i[8]=63&i[8]|128,n){r=r||0;for(var a=0;a<16;++a)n[r+a]=i[a];return n}return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,e=(u[t[n+0]]+u[t[n+1]]+u[t[n+2]]+u[t[n+3]]+"-"+u[t[n+4]]+u[t[n+5]]+"-"+u[t[n+6]]+u[t[n+7]]+"-"+u[t[n+8]]+u[t[n+9]]+"-"+u[t[n+10]]+u[t[n+11]]+u[t[n+12]]+u[t[n+13]]+u[t[n+14]]+u[t[n+15]]).toLowerCase();if(!o(e))throw TypeError("Stringified UUID is invalid");return e}(i)},s=function(t){let n=t;const e=a();let r={};return{set_name:function(t){n=t},get_name:function(){return n},get_id:function(){return e},get_tasks:function(){return Object.entries(r)},add_task:function(t){t.remove_self=function(){null!=r[t.get_id()]&&delete r[t.get_id()]},r[t.get_id()]=t},get_task:function(t){return r[t]},remove_task:function(t){null!=r[t]&&delete r[t]}}};s("Inbox"),s("Today")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,