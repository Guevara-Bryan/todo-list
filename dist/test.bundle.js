(()=>{"use strict";var t={475:(t,e,n)=>{var r;n.d(e,{l2:()=>_,PF:()=>p,rz:()=>d});var o=new Uint8Array(16);function s(){if(!r&&!(r="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return r(o)}const i=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,u=function(t){return"string"==typeof t&&i.test(t)};for(var c=[],a=0;a<256;++a)c.push((a+256).toString(16).substr(1));const f=function(t,e,n){var r=(t=t||{}).random||(t.rng||s)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,e){n=n||0;for(var o=0;o<16;++o)e[n+o]=r[o];return e}return function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(c[t[e+0]]+c[t[e+1]]+c[t[e+2]]+c[t[e+3]]+"-"+c[t[e+4]]+c[t[e+5]]+"-"+c[t[e+6]]+c[t[e+7]]+"-"+c[t[e+8]]+c[t[e+9]]+"-"+c[t[e+10]]+c[t[e+11]]+c[t[e+12]]+c[t[e+13]]+c[t[e+14]]+c[t[e+15]]).toLowerCase();if(!u(n))throw TypeError("Stringified UUID is invalid");return n}(r)},d=function(t,e,n,r,o){let s=t,i=f(),u=e,c=n,a=r,d=o;const p={get_name:function(){return s},set_name:function(t){s=t},get_details:function(){return u},set_details:function(t){u=t},get_id:function(){return i},get_date:function(){return c},set_date:function(t){c=t},get_status:function(){return a},set_status:function(t){a=t},get_priority:function(){return d},set_priority:function(t){d=t},to_json:function(){return JSON.stringify(this,((t,e)=>void 0===["from_json","remove_self"].find((e=>e===t))&&"function"==typeof e?e():e))},from_json:function(t){const e=JSON.parse(t);return s=e.get_name,i=e.get_id,u=e.get_details,c=e.get_date,a=e.get_status,d=e.get_priority,p}};return p},p=function(t){let e=t,n=f(),r={};const o={set_name:function(t){e=t},get_name:function(){return e},get_id:function(){return n},get_tasks:function(){return Object.keys(r).map((t=>r[t]))},add_task:function(t){t.remove_self=function(){null!=r[t.get_id()]&&delete r[t.get_id()]},r[t.get_id()]=t},get_task:function(t){return r[t]},remove_task:function(t){null!=r[t]&&delete r[t]},to_json:function(){return JSON.stringify({name:e,id:n,tasks:JSON.stringify(r,((t,e)=>void 0!==e.to_json?e.to_json():e))})},from_json:function(t){const s=JSON.parse(t,((t,e)=>{if("tasks"===t){const t=JSON.parse(e);for(const e in t)t[e]=d().from_json(t[e]);return t}return e}));return e=s.name,n=s.id,r=s.tasks,o}};return o},_=function(t){const e={inbox:p("Inbox"),today:p("Today"),projects:{}};return{get_title:function(){return"TODO LIST"},get_section:function(t){return e[t]},add_project:function(t){t.remove_self=function(){null!=e.projects[t.get_id()]&&delete e.projects[t.get_id()]},e.projects[t.get_id()]=t},remove_project:function(t){null!=e.projects[t]&&delete e.projects[t]},get_project:function(t){return e.projects[t]},get_projects:function(){return Object.keys(e.projects).map((t=>e.projects[t]))}}}()}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var s=e[r]={exports:{}};return t[r](s,s.exports,n),s.exports}n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t=n(475);t.l2.add_project((0,t.PF)("Homework")),t.l2.add_project((0,t.PF)("House Chores")),t.l2.add_project((0,t.PF)("Party")),t.l2.get_projects()[0].add_task((0,t.rz)("Math","chapter 13",Date(),"Pending","Low")),t.l2.get_projects()[0].add_task((0,t.rz)("English","chapter 13",Date(),"Pending","Low")),t.l2.get_projects()[0].add_task((0,t.rz)("History","chapter 13",Date(),"Pending","Low")),t.l2.get_projects()[0];const e=t.l2.get_projects()[0].to_json(),r=(0,t.PF)().from_json(e);console.log(`Are they identical: ${r.to_json()===e}`)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,