(()=>{"use strict";var t={475:(t,e,o)=>{var n;o.d(e,{l2:()=>g,PF:()=>f,rz:()=>d,dJ:()=>_});var r=new Uint8Array(16);function s(){if(!n&&!(n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return n(r)}const c=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,i=function(t){return"string"==typeof t&&c.test(t)};for(var a=[],u=0;u<256;++u)a.push((u+256).toString(16).substr(1));const l=function(t,e,o){var n=(t=t||{}).random||(t.rng||s)();if(n[6]=15&n[6]|64,n[8]=63&n[8]|128,e){o=o||0;for(var r=0;r<16;++r)e[o+r]=n[r];return e}return function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,o=(a[t[e+0]]+a[t[e+1]]+a[t[e+2]]+a[t[e+3]]+"-"+a[t[e+4]]+a[t[e+5]]+"-"+a[t[e+6]]+a[t[e+7]]+"-"+a[t[e+8]]+a[t[e+9]]+"-"+a[t[e+10]]+a[t[e+11]]+a[t[e+12]]+a[t[e+13]]+a[t[e+14]]+a[t[e+15]]).toLowerCase();if(!i(o))throw TypeError("Stringified UUID is invalid");return o}(n)},d=function(t,e,o,n,r){let s=t;const c=l();let i=e,a=o,u=n,d=r;return{get_name:function(){return s},set_name:function(t){s=t},get_details:function(){return i},set_details:function(t){i=t},get_id:function(){return c},get_date:function(){return a},set_date:function(t){a=t},get_status:function(){return u},set_status:function(t){u=t},get_priority:function(){return d},set_priority:function(t){d=t},to_json:function(){return JSON.stringify({name:s,id:c,details:i,date:a.toString(),status:u,priority:d})}}},f=function(t){let e=t;const o=l();let n={};return{set_name:function(t){e=t},get_name:function(){return e},get_id:function(){return o},get_tasks:function(){return Object.entries(n)},add_task:function(t){t.remove_self=function(){null!=n[t.get_id()]&&delete n[t.get_id()]},n[t.get_id()]=t},get_task:function(t){return n[t]},remove_task:function(t){null!=n[t]&&delete n[t]}}},g=function(t){const e={inbox:f("Inbox"),today:f("Today"),projects:{}};return{get_title:function(){return"Todo List"},get_section:function(t){return e[t]},add_project:function(t){t.remove_self=function(){null!=e.projects[t.get_id()]&&delete e.projects[t.get_id()]},e.projects[t.get_id()]=t},remove_project:function(t){null!=e.projects[t]&&delete e.projects[t]},get_project:function(t){return e.projects[t]},get_projects:function(){return Object.entries(e.projects)}}}();function _(t){const e=JSON.parse(t);return d(e.name,e.details,new Date(e.date),e.status,e.priority)}}},e={};function o(n){var r=e[n];if(void 0!==r)return r.exports;var s=e[n]={exports:{}};return t[n](s,s.exports,o),s.exports}o.d=(t,e)=>{for(var n in e)o.o(e,n)&&!o.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},o.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t=o(475);t.l2.add_project((0,t.PF)("Homework")),t.l2.add_project((0,t.PF)("TODO")),t.l2.add_project((0,t.PF)("Chores")),console.log("=============== Projects ==============="),t.l2.get_projects().forEach((t=>{console.log(t[1].get_name())})),t.l2.get_projects()[1][1].remove_self(),console.log("================ Deleting second item ========="),t.l2.get_projects().forEach((t=>{console.log(t[1].get_name())})),t.l2.get_projects()[0][1].add_task((0,t.rz)("Science Homework")),t.l2.get_projects()[0][1].add_task((0,t.rz)("Math Homework")),t.l2.get_projects()[0][1].add_task((0,t.rz)("Automata Homework")),console.log("=============== Homework Taks ================="),t.l2.get_projects()[0][1].get_tasks().forEach((t=>{console.log(t[1].get_name())})),console.log("=========== Deleting second item ============="),t.l2.get_projects()[0][1].get_tasks()[1][1].remove_self(),t.l2.get_projects()[0][1].get_tasks().forEach((t=>{console.log(t[1].get_name())}));const e=(0,t.rz)("Water the plants","Use fertilizer",new Date,"Pending","Low").to_json();console.log(e);const n=(0,t.dJ)(e);console.log(n.get_name()),console.log(n)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,